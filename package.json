{
  "name": "songifly",
  "version": "0.1.0",
  "private": true,
  "prisma": {
    "seed": "ts-node --compiler-options {\"module\":\"CommonJS\"} prisma/seed.ts"
  },
  "scripts": {
    "_________dbs____________": "_____________________first you run dbs-dev-up (in one termianal) after that you can run prisma comands in separate terminal______________________",
    "dbs-dev-up": "docker-compose up",
    "dbs-dev-down": "docker-compose down",
    "postgres-cont-bash": "docker-compose run songifly-db-service bash",
    "_________development shorthand scripts____________": "_________________________________________________",
    "develop": "yarn p-push-dev && yarn dev",
    "_________prisma(common for development and production)--------------": "--------------------------",
    "p-generate-client": "npx prisma generate",
    "__________prisma-db-dev____________": "___________________________________________",
    "_comment(p-push-dev)": "use only when you don't mind your datbase to be reseted (wiped) (in contrast to migrate (where your datbase doesnt get wiped))",
    "p-push-dev": "dotenv -e .env.development -- npx prisma db push",
    "p-migrate-init-dev": "dotenv -e .env.development -- npx prisma migrate dev --name init",
    "p-migrate-dev": "dotenv -e .env.development -- npx prisma migrate dev",
    "p-migrate-dev-reset": "dotenv -e .env.development -- npx prisma migrate reset",
    "p-studio-dev": "dotenv -e .env.development -- npx prisma studio",
    "p-seed-dev": "dotenv -e .env.development -- npm run ts-node prisma/seed.ts --preview-feature",
    "__________prisma-db-prod (or staging)____________": "___________________________________________",
    "p-push-prod": "dotenv -e .env.production -- npx prisma db push",
    "p-migrate-init-prod": "dotenv -e .env.production -- npx prisma migrate dev --name init",
    "p-migrate-prod": "dotenv -e .env.production -- npx prisma migrate dev",
    "p-migrate-prod-reset": "dotenv -e .env.production -- npx prisma migrate reset",
    "p-migrate-prod-deploy": "dotenv -e .env.production -- npx prisma migrate deploy",
    "p-studio-prod": "dotenv -e .env.production -- npx prisma studio",
    "p-seed-prod": "dotenv -e .env.production -- npm run ts-node prisma/seed.ts --preview-feature",
    "__________prisma(I am not going to use this in this project)__________": "_________________________________________________",
    "p-introspect": "dotenv -e .env.production -- npx prisma introspect",
    "__________nextjs and other stuff_______________": "____________________________________________________",
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "ts-node": "ts-node --compiler-options \"{\\\"module\\\":\\\"commonjs\\\"}\"",
    "ts-node-test": "ts-node --compiler-options \"{\\\"module\\\":\\\"esnext\\\"}\"",
    "lint": "next lint",
    "_________mora at once____________": "___________________________________________",
    "dd": "yarn postgres:dev && yarn p:push:dev && yarn p:seed:dev && yarn dev",
    "d": "yarn postgres:dev && yarn p:push:dev && yarn p:seed:dev && yarn dev",
    "p": "yarn p:push:prod && yarn p:seed:prod",
    "_______with manual docker commands": "______________________________________",
    "db:dev": "yarn postgres:dev",
    "db:dev:kill": "yarn postgres:dev:kill",
    "postgres:dev": "docker run --name fancy-parrot -e POSTGRES_PASSWORD=schism -p 5432:5432 -d --rm postgres:13.3",
    "postgres:dev:kill": "docker kill fancy-parrot",
    "psql:dev": "docker exec -it -u postgres fancy-parrot psql",
    "p:studio:prod": "dotenv -e .env.production -- npx prisma studio",
    "p:studio:dev": "dotenv -e .env.development -- npx prisma studio",
    "p:push:prod": "dotenv -e .env.production -- npx prisma db push",
    "p:push:dev": "dotenv -e .env.development -- npx prisma db push",
    "p:migrate:prod": "dotenv -e .env.production -- npx prisma migrate dev",
    "p:migrate:dev": "dotenv -e .env.development -- npx prisma migrate dev",
    "p:migrate:init:dev": "dotenv -e .env.development -- npx prisma migrate dev --name init",
    "p:migrate:init:prod": "dotenv -e .env.production -- npx prisma migrate dev --name init",
    "p:introspect": "dotenv -e .env.production -- npx prisma introspect"
  },
  "dependencies": {
    "@prisma/client": "^4.1.0",
    "@xstate/react": "^3.0.0",
    "bcrypt": "^5.0.1",
    "cookie": "^0.5.0",
    "cookies": "^0.8.0",
    "daisyui": "^2.20.0",
    "eslint": "^8.20.0",
    "format-duration": "^2.0.0",
    "framer-motion": "^6.5.1",
    "jsonwebtoken": "^8.5.1",
    "next": "12.2.3",
    "next-themes": "^0.2.0",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-howler": "^5.2.0",
    "react-icons": "^4.4.0",
    "swr": "^1.3.0",
    "xstate": "^4.32.1"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.4",
    "@types/bcrypt": "^5.0.0",
    "@types/cookie": "^0.5.1",
    "@types/jsonwebtoken": "^8.5.8",
    "@types/node": "18.0.6",
    "@types/react": "18.0.15",
    "@types/react-dom": "18.0.6",
    "@typescript-eslint/eslint-plugin": "^5.30.7",
    "@typescript-eslint/parser": "^5.30.7",
    "autoprefixer": "^10.4.7",
    "eslint-config-next": "12.2.3",
    "eslint-config-prettier": "^8.5.0",
    "eslint-import-resolver-alias": "^1.1.2",
    "eslint-plugin-import": "^2.26.0",
    "eslint-plugin-jsx-a11y": "^6.6.1",
    "eslint-plugin-react": "^7.30.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "postcss": "^8.4.14",
    "prettier": "^2.7.1",
    "prisma": "^4.1.0",
    "tailwindcss": "^3.1.6",
    "ts-node": "^10.9.1",
    "typescript": "4.7.4"
  }
}
